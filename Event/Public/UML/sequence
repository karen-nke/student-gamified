User Creation and Login 

@startuml
actor User
participant System
database Database

User -> System: Register with email and password
System -> Database: Check if email exists
Database --> System: Email exists? (Yes/No)

alt Email doesn't exist
    System -> Database: Create new user
    Database --> System: User created
    System --> User: Registration successful
else Email exists
    System --> User: Registration failed\nEmail already in use
end

User -> System: Login with email and password
System -> Database: Fetch user data
Database --> System: User data
System --> User: Authentication successful

@enduml

Challenge System 

@startuml
actor User
participant "Challenge System" as ChallengeSystem
participant "Points System" as PointsSystem
participant "Reward System" as RewardSystem
database Database

User -> ChallengeSystem: Start Challenge
ChallengeSystem -> ChallengeSystem: Record user started challenge

User -> ChallengeSystem: Complete Challenge
ChallengeSystem -> ChallengeSystem: Record challenge completion
ChallengeSystem -> PointsSystem: Earn Points for Challenge Completion

User -> ChallengeSystem: Complete Module Challenges
ChallengeSystem -> ChallengeSystem: Record module challenges completion
ChallengeSystem -> PointsSystem: Earn Points for Module Completion
ChallengeSystem -> RewardSystem: Earn Module Completion Badge

User -> RewardSystem: Earn Badges
RewardSystem -> Database: Fetch user's earned badges
Database --> RewardSystem: User's earned badges
RewardSystem --> User: Display Earned Badges

User -> PointsSystem: View Point History
PointsSystem -> Database: Fetch point history
Database --> PointsSystem: User's point history
PointsSystem --> User: Display Point History

@enduml

Level System
@startuml
actor User
participant "Points System" as PointsSystem
participant "Level-Up System" as LevelUpSystem
database Database

User -> PointsSystem: Earn Points
PointsSystem -> LevelUpSystem: Check Points for Level-Up
LevelUpSystem -> LevelUpSystem: Determine if user can level up
LevelUpSystem -> PointsSystem: Update User's Level
PointsSystem -> Database: Update User's Level
Database --> PointsSystem: Confirmation
PointsSystem --> User: Display Updated Level

@enduml

Event System 

@startuml
actor User
participant "Event System" as EventSystem
database Database
participant "Points System" as PointsSystem

User -> EventSystem: Submit Event Form
EventSystem -> PointsSystem: Reward Points
PointsSystem -> Database: Update User's Points
Database --> PointsSystem: Confirmation
PointsSystem --> EventSystem: Confirmation
EventSystem -> Database: Record Event in Event History
Database --> EventSystem: Confirmation
EventSystem --> User: Display Confirmation Message

@enduml
